{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageWin","messageLose","gameScore","fieldRows","querySelectorAll","size","cellsCount","gameStarted","score","win","addedNumber","gameField","renderTable","row","col","elem","children","cell","textContent","className","createNumber","emptyCells","allCellsZero","push","firstNumberIndex","Math","floor","random","length","firstCellXY","splice","secondNumberIndex","secondCellXY","reset","classList","contains","add","moveLeft","i","rowValues","filter","index","j","moveRight","forEach","reverse","moveUp","rewindColumnToRow","rewindRowToColumn","moveDown","newArray","possibleMoveCells","possibleMove","some","addEventListener","e","replace","innerText","ev","code","remove"],"mappings":"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","file":"main.52460dc7.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst gameScore = document.querySelector('.game-score');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst size = 4;\nconst cellsCount = 16;\nlet gameStarted = false;\nlet score = 0;\nlet win = false;\nconst addedNumber = [2, 2, 2, 2, 2, 2, 2, 2, 2, 4];\nlet gameField = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n// click start, init table\nbutton.addEventListener('click', e => {\n  gameStarted = true;\n\n  if (button.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n  } else {\n    win = false;\n    reset();\n  }\n\n  createNumber();\n  renderTable();\n});\n\n// fill table and score\nfunction renderTable() {\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      const elem = fieldRows[row].children[col];\n      const cell = gameField[row][col];\n\n      if (cell === 0) {\n        elem.textContent = '';\n        elem.className = 'field-cell';\n      } else {\n        elem.textContent = cell;\n        elem.className = `field-cell field-cell--${cell}`;\n      }\n    };\n  };\n\n  gameScore.textContent = score;\n};\n\n// create and add number to table\nfunction createNumber() {\n  const emptyCells = [];\n  let allCellsZero = 0;\n\n  for (let row = 0; row < size; row++) {\n    for (let col = 0; col < size; col++) {\n      if (gameField[row][col] === 0) {\n        emptyCells.push([row, col]);\n        allCellsZero++;\n      }\n    };\n  };\n\n  const firstNumberIndex = Math.floor(Math.random() * emptyCells.length);\n  const firstCellXY = emptyCells[firstNumberIndex];\n\n  if (allCellsZero === cellsCount) {\n    emptyCells.splice(firstNumberIndex, 1);\n\n    const secondNumberIndex = Math.floor(Math.random() * emptyCells.length);\n    const secondCellXY = emptyCells[secondNumberIndex];\n\n    gameField[firstCellXY[0]][firstCellXY[1]]\n     = addedNumber[Math.floor(Math.random() * addedNumber.length)];\n\n    gameField[secondCellXY[0]][secondCellXY[1]]\n     = addedNumber[Math.floor(Math.random() * addedNumber.length)];\n  } else {\n    gameField[firstCellXY[0]][firstCellXY[1]]\n     = addedNumber[Math.floor(Math.random() * addedNumber.length)];\n  }\n};\n\nfunction reset() {\n  score = 0;\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  if (!messageLose.classList.contains('hidden')) {\n    messageLose.classList.add('hidden');\n  }\n\n  if (!messageWin.classList.contains('hidden')) {\n    messageWin.classList.add('hidden');\n  }\n};\n\n// keymove\ndocument.addEventListener('keyup', (ev) => {\n  if (!gameStarted) {\n    return;\n  }\n\n  switch (ev.code) {\n    case 'ArrowUp':\n      moveUp();\n      break;\n\n    case 'ArrowLeft':\n      moveLeft();\n      break;\n\n    case 'ArrowDown':\n      moveDown();\n      break;\n\n    case 'ArrowRight':\n      moveRight();\n      break;\n\n    default:\n      break;\n  }\n\n  createNumber();\n  renderTable();\n\n  if (!possibleMoveCells()) {\n    messageLose.classList.remove('hidden');\n  }\n\n  if (win) {\n    messageWin.classList.remove('hidden');\n  }\n});\n\n// left move cells\nfunction moveLeft() {\n  for (let i = 0; i < size; i++) {\n    const rowValues = gameField[i].filter(cell => cell !== 0);\n\n    for (let index = 0; index < rowValues.length; index++) {\n      if (rowValues[index] === rowValues[index + 1]) {\n        rowValues[index] *= 2;\n        rowValues.splice(index + 1, 1);\n        score += rowValues[index];\n\n        if (rowValues[index] === 2048) {\n          win = true;\n        }\n      }\n    }\n\n    for (let j = 0; j < size; j++) {\n      gameField[i][j] = rowValues[j] || 0;\n    }\n  }\n}\n\n// move cells right\nfunction moveRight() {\n  gameField.forEach(row => row.reverse());\n  moveLeft();\n  gameField.forEach(row => row.reverse());\n}\n\n// move cells up\nfunction moveUp() {\n  rewindColumnToRow();\n  moveLeft();\n  rewindRowToColumn();\n}\n\n// move cells down\nfunction moveDown() {\n  rewindColumnToRow();\n  moveRight();\n  rewindRowToColumn();\n}\n\n// make row from column\nfunction rewindColumnToRow() {\n  const newArray = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      newArray[i][j] = gameField[j][i];\n    }\n  }\n  gameField = newArray;\n}\n\n// make column from row\nfunction rewindRowToColumn() {\n  const newArray = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  for (let i = 0; i < 4; i++) {\n    for (let j = 0; j < 4; j++) {\n      newArray[j][i] = gameField[i][j];\n    }\n  }\n  gameField = newArray;\n}\n\n// possible move cells in rows and columns\nfunction possibleMoveCells() {\n  let possibleMove = false;\n\n  // check rows\n  for (let i = 0; i < size; i++) {\n    if (gameField[i].some(cell => cell === 0)\n        || gameField[i].some((cell, j) => cell === gameField[i][j + 1])) {\n      possibleMove = true;\n    }\n  }\n  // check column\n  rewindColumnToRow();\n\n  for (let i = 0; i < size; i++) {\n    if (gameField[i].some((cell, j) => cell === gameField[i][j + 1])) {\n      possibleMove = true;\n    }\n  }\n  rewindRowToColumn();\n\n  return possibleMove;\n}\n"]}